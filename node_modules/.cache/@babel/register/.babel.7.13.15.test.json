{
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Automation\\\\webdriver-io-practice\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Automation\\\\webdriver-io-practice\",\"filename\":\"C:\\\\Automation\\\\webdriver-io-practice\\\\wdio.conf.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Automation\\\\webdriver-io-practice\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.13.15:test": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Automation\\webdriver-io-practice\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Automation\\webdriver-io-practice",
      "filename": "C:\\Automation\\webdriver-io-practice\\wdio.conf.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "test",
      "root": "C:\\Automation\\webdriver-io-practice",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Automation\\webdriver-io-practice\\wdio.conf.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Automation\\webdriver-io-practice\\wdio.conf.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Automation\\webdriver-io-practice\\",
        "sourceFileName": "wdio.conf.js"
      }
    },
    "ast": null,
    "code": "exports.config = {\n  //\n  // ====================\n  // Runner Configuration\n  // ====================\n  //\n  // WebdriverIO allows it to run your tests in arbitrary locations (e.g. locally or\n  // on a remote machine).\n  runner: 'local',\n  //\n  //path:'/wd/hub',\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // from which `wdio` was called.\n  //\n  // The specs are defined as an array of spec files (optionally using wildcards\n  // that will be expanded). The test for each spec file will be run in a separate\n  // worker process. In order to have a group of spec files run in the same worker\n  // process simply enclose them in an array within the specs array.\n  //\n  // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n  // then the current working directory is where your `package.json` resides, so `wdio`\n  // will be called from there.\n  //\n  specs: ['./features/Login.feature'],\n  // Patterns to exclude.\n  exclude: [// 'path/to/excluded/files'\n  ],\n  //\n  // ============\n  // Capabilities\n  // ============\n  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n  // time. Depending on the number of capabilities, WebdriverIO launches several test\n  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n  // order to group specific specs to a specific capability.\n  //\n  // First, you can define how many instances should be started at the same time. Let's\n  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n  // files and you set maxInstances to 10, all spec files will get tested at the same time\n  // and 30 processes will get spawned. The property handles how many capabilities\n  // from the same test should run tests.\n  //\n  maxInstances: 10,\n  //\n  // If you have trouble getting all important capabilities together, check out the\n  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n  // https://docs.saucelabs.com/reference/platforms-configurator\n  //\n  capabilities: [{\n    // maxInstances can get overwritten per capability. So if you have an in-house Selenium\n    // grid with only 5 firefox instances available you can make sure that not more than\n    // 5 instances get started at a time.\n    maxInstances: 5,\n    //\n    browserName: 'chrome',\n    acceptInsecureCerts: true // If outputDir is provided WebdriverIO can capture driver session logs\n    // it is possible to configure which logTypes to include/exclude.\n    // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n    // excludeDriverLogs: ['bugreport', 'server'],\n\n  }],\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  logLevel: 'info',\n  //\n  // Set specific log levels per logger\n  // loggers:\n  // - webdriver, webdriverio\n  // - @wdio/applitools-service, @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n  // - @wdio/mocha-framework, @wdio/jasmine-framework\n  // - @wdio/local-runner\n  // - @wdio/sumologic-reporter\n  // - @wdio/cli, @wdio/config, @wdio/utils\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  // logLevels: {\n  //     webdriver: 'info',\n  //     '@wdio/applitools-service': 'info'\n  // },\n  //\n  // If you only want to run your tests until a specific amount of tests have failed use\n  // bail (default is 0 - don't bail, run all tests).\n  bail: 0,\n  //\n  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n  // gets prepended directly.\n  baseUrl: 'http://automationpractice.com/index.php',\n  //\n  // Default timeout for all waitFor* commands.\n  waitforTimeout: 10000,\n  //\n  // Default timeout in milliseconds for request\n  // if browser driver or grid doesn't send response\n  connectionRetryTimeout: 120000,\n  //\n  // Default request retries count\n  connectionRetryCount: 3,\n  //\n  // Test runner services\n  // Services take over a specific job you don't want to take care of. They enhance\n  // your test setup with almost no effort. Unlike plugins, they don't add new\n  // commands. Instead, they hook themselves up into the test process.\n  services: ['chromedriver'],\n  // Framework you want to run your specs with.\n  // The following are supported: Mocha, Jasmine, and Cucumber\n  // see also: https://webdriver.io/docs/frameworks\n  //\n  // Make sure you have the wdio adapter package for the specific framework installed\n  // before running any tests.\n  framework: 'cucumber',\n  //\n  // The number of times to retry the entire specfile when it fails as a whole\n  // specFileRetries: 1,\n  //\n  // Delay in seconds between the spec file retry attempts\n  // specFileRetriesDelay: 0,\n  //\n  // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue\n  // specFileRetriesDeferred: false,\n  //\n  // Test reporter for stdout.\n  // The only one supported by default is 'dot'\n  // see also: https://webdriver.io/docs/dot-reporter\n  reporters: [['allure', {\n    outputDir: 'allure-results'\n  }]],\n  //\n  // If you are using Cucumber you need to specify the location of your step definitions.\n  cucumberOpts: {\n    // <string[]> (file/dir) require files before executing features\n    require: ['./features/step-definitions/Login.stepdef.js'],\n    require: ['./node_modules/@babel/register'],\n    // <boolean> show full backtrace for errors\n    backtrace: false,\n    compiler: ['js:babel-core/register'],\n    // <string[]> (\"extension:module\") require files with the given EXTENSION after requiring MODULE (repeatable)\n    requireModule: ['@babel/register'],\n    // <boolean> invoke formatters without executing steps\n    dryRun: false,\n    // <boolean> abort the run on first failure\n    failFast: false,\n    // <string[]> (type[:path]) specify the output format, optionally supply PATH to redirect formatter output (repeatable)\n    format: ['pretty'],\n    // <boolean> hide step definition snippets for pending steps\n    snippets: true,\n    // <boolean> hide source uris\n    source: true,\n    // <string[]> (name) specify the profile to use\n    profile: [],\n    // <boolean> fail if there are any undefined or pending steps\n    strict: false,\n    // <string> (expression) only execute the features or scenarios with tags matching the expression\n    tagExpression: '',\n    // <number> timeout for step definitions\n    timeout: 60000,\n    // <boolean> Enable this config to treat undefined definitions as warnings.\n    ignoreUndefinedDefinitions: true\n  } //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // it and to build services around it. You can either apply a single function or an array of\n  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // resolved to continue.\n\n  /**\n   * Gets executed once before all workers get launched.\n   * @param {Object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   */\n  // onPrepare: function (config, capabilities) {\n  // },\n\n  /**\n   * Gets executed before a worker process is spawned and can be used to initialise specific service\n   * for that worker as well as modify runtime environments in an async fashion.\n   * @param  {String} cid      capability id (e.g 0-0)\n   * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker\n   * @param  {[type]} specs    specs to be run in the worker process\n   * @param  {[type]} args     object that will be merged with the main configuration once worker is initialised\n   * @param  {[type]} execArgv list of string arguments passed to the worker process\n   */\n  // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n  // },\n\n  /**\n   * Gets executed just before initialising the webdriver session and test framework. It allows you\n   * to manipulate configurations depending on the capability or spec.\n   * @param {Object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that are to be run\n   */\n  // beforeSession: function (config, capabilities, specs) {\n  // },\n\n  /**\n   * Gets executed before test execution begins. At this point you can access to all global\n   * variables like `browser`. It is the perfect place to define custom commands.\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs        List of spec file paths that are to be run\n   * @param {Object}         browser      instance of created browser/device session\n   */\n  // before: function (capabilities, specs) {\n  // },\n\n  /**\n   * Runs before a WebdriverIO command gets executed.\n   * @param {String} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   */\n  // beforeCommand: function (commandName, args) {\n  // },\n\n  /**\n   * Runs before a Cucumber feature\n   */\n  // beforeFeature: function (uri, feature) {\n  // },\n\n  /**\n   * Runs before a Cucumber scenario\n   */\n  // beforeScenario: function (world) {\n  // },\n\n  /**\n   * Runs before a Cucumber step\n   */\n  // beforeStep: function (step, context) {\n  // },\n\n  /**\n   * Runs after a Cucumber step\n   */\n  // afterStep: function (step, context) {\n  // },\n\n  /**\n   * Runs after a Cucumber scenario\n   */\n  // afterScenario: function (world) {\n  // },\n\n  /**\n   * Runs after a Cucumber feature\n   */\n  // afterFeature: function (uri, feature) {\n  // },\n\n  /**\n   * Runs after a WebdriverIO command gets executed\n   * @param {String} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   * @param {Number} result 0 - command success, 1 - command error\n   * @param {Object} error error object if any\n   */\n  // afterCommand: function (commandName, args, result, error) {\n  // },\n\n  /**\n   * Gets executed after all tests are done. You still have access to all global variables from\n   * the test.\n   * @param {Number} result 0 - test pass, 1 - test fail\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // after: function (result, capabilities, specs) {\n  // },\n\n  /**\n   * Gets executed right after terminating the webdriver session.\n   * @param {Object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // afterSession: function (config, capabilities, specs) {\n  // },\n\n  /**\n   * Gets executed after all workers got shut down and the process is about to exit. An error\n   * thrown in the onComplete hook will result in the test run failing.\n   * @param {Object} exitCode 0 - success, 1 - fail\n   * @param {Object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {<Object>} results object containing test results\n   */\n  // onComplete: function(exitCode, config, capabilities, results) {\n  // },\n\n  /**\n  * Gets executed when a refresh happens.\n  * @param {String} oldSessionId session ID of the old session\n  * @param {String} newSessionId session ID of the new session\n  */\n  //onReload: function(oldSessionId, newSessionId) {\n  //}\n\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "wdio.conf.js"
      ],
      "names": [
        "exports",
        "config",
        "runner",
        "specs",
        "exclude",
        "maxInstances",
        "capabilities",
        "browserName",
        "acceptInsecureCerts",
        "logLevel",
        "bail",
        "baseUrl",
        "waitforTimeout",
        "connectionRetryTimeout",
        "connectionRetryCount",
        "services",
        "framework",
        "reporters",
        "outputDir",
        "cucumberOpts",
        "require",
        "backtrace",
        "compiler",
        "requireModule",
        "dryRun",
        "failFast",
        "format",
        "snippets",
        "source",
        "profile",
        "strict",
        "tagExpression",
        "timeout",
        "ignoreUndefinedDefinitions"
      ],
      "mappings": "AAAAA,OAAO,CAACC,MAAR,GAAiB;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,EAAE,OARK;AASb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,KAAK,EAAE,CACH,0BADG,CA1BM;AA6Bb;AACAC,EAAAA,OAAO,EAAE,CACL;AADK,GA9BI;AAiCb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,YAAY,EAAE,EAjDD;AAkDb;AACA;AACA;AACA;AACA;AACAC,EAAAA,YAAY,EAAE,CAAC;AAEX;AACA;AACA;AACAD,IAAAA,YAAY,EAAE,CALH;AAMX;AACAE,IAAAA,WAAW,EAAE,QAPF;AAQXC,IAAAA,mBAAmB,EAAE,IARV,CASX;AACA;AACA;AACA;;AAZW,GAAD,CAvDD;AAqEb;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAAQ,EAAE,MA5EG;AA6Eb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,IAAI,EAAE,CA9FO;AA+Fb;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,EAAE,yCApGI;AAqGb;AACA;AACAC,EAAAA,cAAc,EAAE,KAvGH;AAwGb;AACA;AACA;AACAC,EAAAA,sBAAsB,EAAE,MA3GX;AA4Gb;AACA;AACAC,EAAAA,oBAAoB,EAAE,CA9GT;AA+Gb;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAAQ,EAAE,CAAC,cAAD,CApHG;AAsHb;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,SAAS,EAAE,UA5HE;AA6Hb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,SAAS,EAAE,CAAC,CAAC,QAAD,EAAW;AAACC,IAAAA,SAAS,EAAE;AAAZ,GAAX,CAAD,CA1IE;AA6Ib;AACA;AACAC,EAAAA,YAAY,EAAE;AACV;AACAC,IAAAA,OAAO,EAAE,CAAC,8CAAD,CAFC;AAGVA,IAAAA,OAAO,EAAE,CAAC,gCAAD,CAHC;AAIV;AACAC,IAAAA,SAAS,EAAE,KALD;AAMVC,IAAAA,QAAQ,EAAE,CAAC,wBAAD,CANA;AAOV;AACAC,IAAAA,aAAa,EAAE,CAAC,iBAAD,CARL;AASV;AACAC,IAAAA,MAAM,EAAE,KAVE;AAWV;AACAC,IAAAA,QAAQ,EAAE,KAZA;AAaV;AACAC,IAAAA,MAAM,EAAE,CAAC,QAAD,CAdE;AAeV;AACAC,IAAAA,QAAQ,EAAE,IAhBA;AAiBV;AACAC,IAAAA,MAAM,EAAE,IAlBE;AAmBV;AACAC,IAAAA,OAAO,EAAE,EApBC;AAqBV;AACAC,IAAAA,MAAM,EAAE,KAtBE;AAuBV;AACAC,IAAAA,aAAa,EAAE,EAxBL;AAyBV;AACAC,IAAAA,OAAO,EAAE,KA1BC;AA2BV;AACAC,IAAAA,0BAA0B,EAAE;AA5BlB,GA/ID,CA8Kb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACI;AACA;;AACA;AACJ;AACA;AACI;AACA;;AACA;AACJ;AACA;AACI;AACA;;AACA;AACJ;AACA;AACI;AACA;;AACA;AACJ;AACA;AACI;AACA;;AACA;AACJ;AACA;AACI;AACA;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;;AACA;AACJ;AACA;AACA;AACA;AACI;AACA;;AA1Sa,CAAjB",
      "sourceRoot": "C:\\Automation\\webdriver-io-practice\\",
      "sourcesContent": [
        "exports.config = {\n    //\n    // ====================\n    // Runner Configuration\n    // ====================\n    //\n    // WebdriverIO allows it to run your tests in arbitrary locations (e.g. locally or\n    // on a remote machine).\n    runner: 'local',\n    //\n    //path:'/wd/hub',\n    // ==================\n    // Specify Test Files\n    // ==================\n    // Define which test specs should run. The pattern is relative to the directory\n    // from which `wdio` was called.\n    //\n    // The specs are defined as an array of spec files (optionally using wildcards\n    // that will be expanded). The test for each spec file will be run in a separate\n    // worker process. In order to have a group of spec files run in the same worker\n    // process simply enclose them in an array within the specs array.\n    //\n    // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n    // then the current working directory is where your `package.json` resides, so `wdio`\n    // will be called from there.\n    //\n    specs: [\n        './features/Login.feature'\n    ],\n    // Patterns to exclude.\n    exclude: [\n        // 'path/to/excluded/files'\n    ],\n    //\n    // ============\n    // Capabilities\n    // ============\n    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n    // time. Depending on the number of capabilities, WebdriverIO launches several test\n    // sessions. Within your capabilities you can overwrite the spec and exclude options in\n    // order to group specific specs to a specific capability.\n    //\n    // First, you can define how many instances should be started at the same time. Let's\n    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n    // files and you set maxInstances to 10, all spec files will get tested at the same time\n    // and 30 processes will get spawned. The property handles how many capabilities\n    // from the same test should run tests.\n    //\n    maxInstances: 10,\n    //\n    // If you have trouble getting all important capabilities together, check out the\n    // Sauce Labs platform configurator - a great tool to configure your capabilities:\n    // https://docs.saucelabs.com/reference/platforms-configurator\n    //\n    capabilities: [{\n    \n        // maxInstances can get overwritten per capability. So if you have an in-house Selenium\n        // grid with only 5 firefox instances available you can make sure that not more than\n        // 5 instances get started at a time.\n        maxInstances: 5,\n        //\n        browserName: 'chrome',\n        acceptInsecureCerts: true\n        // If outputDir is provided WebdriverIO can capture driver session logs\n        // it is possible to configure which logTypes to include/exclude.\n        // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\n        // excludeDriverLogs: ['bugreport', 'server'],\n    }],\n    //\n    // ===================\n    // Test Configurations\n    // ===================\n    // Define all options that are relevant for the WebdriverIO instance here\n    //\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    logLevel: 'info',\n    //\n    // Set specific log levels per logger\n    // loggers:\n    // - webdriver, webdriverio\n    // - @wdio/applitools-service, @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n    // - @wdio/mocha-framework, @wdio/jasmine-framework\n    // - @wdio/local-runner\n    // - @wdio/sumologic-reporter\n    // - @wdio/cli, @wdio/config, @wdio/utils\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    // logLevels: {\n    //     webdriver: 'info',\n    //     '@wdio/applitools-service': 'info'\n    // },\n    //\n    // If you only want to run your tests until a specific amount of tests have failed use\n    // bail (default is 0 - don't bail, run all tests).\n    bail: 0,\n    //\n    // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n    // gets prepended directly.\n    baseUrl: 'http://automationpractice.com/index.php',\n    //\n    // Default timeout for all waitFor* commands.\n    waitforTimeout: 10000,\n    //\n    // Default timeout in milliseconds for request\n    // if browser driver or grid doesn't send response\n    connectionRetryTimeout: 120000,\n    //\n    // Default request retries count\n    connectionRetryCount: 3,\n    //\n    // Test runner services\n    // Services take over a specific job you don't want to take care of. They enhance\n    // your test setup with almost no effort. Unlike plugins, they don't add new\n    // commands. Instead, they hook themselves up into the test process.\n    services: ['chromedriver'],\n    \n    // Framework you want to run your specs with.\n    // The following are supported: Mocha, Jasmine, and Cucumber\n    // see also: https://webdriver.io/docs/frameworks\n    //\n    // Make sure you have the wdio adapter package for the specific framework installed\n    // before running any tests.\n    framework: 'cucumber',\n    //\n    // The number of times to retry the entire specfile when it fails as a whole\n    // specFileRetries: 1,\n    //\n    // Delay in seconds between the spec file retry attempts\n    // specFileRetriesDelay: 0,\n    //\n    // Whether or not retried specfiles should be retried immediately or deferred to the end of the queue\n    // specFileRetriesDeferred: false,\n    //\n    // Test reporter for stdout.\n    // The only one supported by default is 'dot'\n    // see also: https://webdriver.io/docs/dot-reporter\n    reporters: [['allure', {outputDir: 'allure-results'}]],\n\n\n    //\n    // If you are using Cucumber you need to specify the location of your step definitions.\n    cucumberOpts: {\n        // <string[]> (file/dir) require files before executing features\n        require: ['./features/step-definitions/Login.stepdef.js'],\n        require: ['./node_modules/@babel/register'],\n        // <boolean> show full backtrace for errors\n        backtrace: false,\n        compiler: ['js:babel-core/register'],\n        // <string[]> (\"extension:module\") require files with the given EXTENSION after requiring MODULE (repeatable)\n        requireModule: ['@babel/register'],\n        // <boolean> invoke formatters without executing steps\n        dryRun: false,\n        // <boolean> abort the run on first failure\n        failFast: false,\n        // <string[]> (type[:path]) specify the output format, optionally supply PATH to redirect formatter output (repeatable)\n        format: ['pretty'],\n        // <boolean> hide step definition snippets for pending steps\n        snippets: true,\n        // <boolean> hide source uris\n        source: true,\n        // <string[]> (name) specify the profile to use\n        profile: [],\n        // <boolean> fail if there are any undefined or pending steps\n        strict: false,\n        // <string> (expression) only execute the features or scenarios with tags matching the expression\n        tagExpression: '',\n        // <number> timeout for step definitions\n        timeout: 60000,\n        // <boolean> Enable this config to treat undefined definitions as warnings.\n        ignoreUndefinedDefinitions: true\n    },\n    \n    //\n    // =====\n    // Hooks\n    // =====\n    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n    // it and to build services around it. You can either apply a single function or an array of\n    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n    // resolved to continue.\n    /**\n     * Gets executed once before all workers get launched.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     */\n    // onPrepare: function (config, capabilities) {\n    // },\n    /**\n     * Gets executed before a worker process is spawned and can be used to initialise specific service\n     * for that worker as well as modify runtime environments in an async fashion.\n     * @param  {String} cid      capability id (e.g 0-0)\n     * @param  {[type]} caps     object containing capabilities for session that will be spawn in the worker\n     * @param  {[type]} specs    specs to be run in the worker process\n     * @param  {[type]} args     object that will be merged with the main configuration once worker is initialised\n     * @param  {[type]} execArgv list of string arguments passed to the worker process\n     */\n    // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n    // },\n    /**\n     * Gets executed just before initialising the webdriver session and test framework. It allows you\n     * to manipulate configurations depending on the capability or spec.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that are to be run\n     */\n    // beforeSession: function (config, capabilities, specs) {\n    // },\n    /**\n     * Gets executed before test execution begins. At this point you can access to all global\n     * variables like `browser`. It is the perfect place to define custom commands.\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs        List of spec file paths that are to be run\n     * @param {Object}         browser      instance of created browser/device session\n     */\n    // before: function (capabilities, specs) {\n    // },\n    /**\n     * Runs before a WebdriverIO command gets executed.\n     * @param {String} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     */\n    // beforeCommand: function (commandName, args) {\n    // },\n    /**\n     * Runs before a Cucumber feature\n     */\n    // beforeFeature: function (uri, feature) {\n    // },\n    /**\n     * Runs before a Cucumber scenario\n     */\n    // beforeScenario: function (world) {\n    // },\n    /**\n     * Runs before a Cucumber step\n     */\n    // beforeStep: function (step, context) {\n    // },\n    /**\n     * Runs after a Cucumber step\n     */\n    // afterStep: function (step, context) {\n    // },\n    /**\n     * Runs after a Cucumber scenario\n     */\n    // afterScenario: function (world) {\n    // },\n    /**\n     * Runs after a Cucumber feature\n     */\n    // afterFeature: function (uri, feature) {\n    // },\n    \n    /**\n     * Runs after a WebdriverIO command gets executed\n     * @param {String} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     * @param {Number} result 0 - command success, 1 - command error\n     * @param {Object} error error object if any\n     */\n    // afterCommand: function (commandName, args, result, error) {\n    // },\n    /**\n     * Gets executed after all tests are done. You still have access to all global variables from\n     * the test.\n     * @param {Number} result 0 - test pass, 1 - test fail\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // after: function (result, capabilities, specs) {\n    // },\n    /**\n     * Gets executed right after terminating the webdriver session.\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // afterSession: function (config, capabilities, specs) {\n    // },\n    /**\n     * Gets executed after all workers got shut down and the process is about to exit. An error\n     * thrown in the onComplete hook will result in the test run failing.\n     * @param {Object} exitCode 0 - success, 1 - fail\n     * @param {Object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {<Object>} results object containing test results\n     */\n    // onComplete: function(exitCode, config, capabilities, results) {\n    // },\n    /**\n    * Gets executed when a refresh happens.\n    * @param {String} oldSessionId session ID of the old session\n    * @param {String} newSessionId session ID of the new session\n    */\n    //onReload: function(oldSessionId, newSessionId) {\n    //}\n}\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1618671312806
  },
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Automation\\\\webdriver-io-practice\\\\features\\\\step-definitions\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Automation\\\\webdriver-io-practice\",\"filename\":\"C:\\\\Automation\\\\webdriver-io-practice\\\\features\\\\step-definitions\\\\steps.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Automation\\\\webdriver-io-practice\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.13.15:test": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Automation\\webdriver-io-practice",
      "filename": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\steps.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "test",
      "root": "C:\\Automation\\webdriver-io-practice",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\steps.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\steps.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\",
        "sourceFileName": "steps.js"
      }
    },
    "ast": null,
    "code": "import { Given, When, Then } from '@cucumber/cucumber';\nimport LoginPage from '../../login.page';\nimport SecurePage from '../../secure.page';\nconst pages = {\n  login: LoginPage\n};\nGiven(/^I am on the (\\w+) page$/, async page => {\n  await pages[page].open();\n});\nWhen(/^I login with (\\w+) and (.+)$/, async (username, password) => {\n  await LoginPage.login(username, password);\n});\nThen(/^I should see a flash message saying (.*)$/, async message => {\n  await expect(SecurePage.flashAlert).toBeExisting();\n  await expect(SecurePage.flashAlert).toHaveTextContaining(message);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0ZXBzLmpzIl0sIm5hbWVzIjpbIkdpdmVuIiwiV2hlbiIsIlRoZW4iLCJMb2dpblBhZ2UiLCJTZWN1cmVQYWdlIiwicGFnZXMiLCJsb2dpbiIsInBhZ2UiLCJvcGVuIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIm1lc3NhZ2UiLCJleHBlY3QiLCJmbGFzaEFsZXJ0IiwidG9CZUV4aXN0aW5nIiwidG9IYXZlVGV4dENvbnRhaW5pbmciXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEtBQVQsRUFBZ0JDLElBQWhCLEVBQXNCQyxJQUF0QixRQUFrQyxvQkFBbEM7QUFFQSxPQUFPQyxTQUFQLE1BQXNCLGtCQUF0QjtBQUNBLE9BQU9DLFVBQVAsTUFBdUIsbUJBQXZCO0FBRUEsTUFBTUMsS0FBSyxHQUFHO0FBQ1ZDLEVBQUFBLEtBQUssRUFBRUg7QUFERyxDQUFkO0FBSUFILEtBQUssQ0FBQywwQkFBRCxFQUE2QixNQUFPTyxJQUFQLElBQWdCO0FBQzlDLFFBQU1GLEtBQUssQ0FBQ0UsSUFBRCxDQUFMLENBQVlDLElBQVosRUFBTjtBQUNILENBRkksQ0FBTDtBQUlBUCxJQUFJLENBQUMsK0JBQUQsRUFBa0MsT0FBT1EsUUFBUCxFQUFpQkMsUUFBakIsS0FBOEI7QUFDaEUsUUFBTVAsU0FBUyxDQUFDRyxLQUFWLENBQWdCRyxRQUFoQixFQUEwQkMsUUFBMUIsQ0FBTjtBQUNILENBRkcsQ0FBSjtBQUlBUixJQUFJLENBQUMsNENBQUQsRUFBK0MsTUFBT1MsT0FBUCxJQUFtQjtBQUNsRSxRQUFNQyxNQUFNLENBQUNSLFVBQVUsQ0FBQ1MsVUFBWixDQUFOLENBQThCQyxZQUE5QixFQUFOO0FBQ0EsUUFBTUYsTUFBTSxDQUFDUixVQUFVLENBQUNTLFVBQVosQ0FBTixDQUE4QkUsb0JBQTlCLENBQW1ESixPQUFuRCxDQUFOO0FBQ0gsQ0FIRyxDQUFKIiwic291cmNlUm9vdCI6IkM6XFxBdXRvbWF0aW9uXFx3ZWJkcml2ZXItaW8tcHJhY3RpY2VcXGZlYXR1cmVzXFxzdGVwLWRlZmluaXRpb25zXFwiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaXZlbiwgV2hlbiwgVGhlbiB9IGZyb20gJ0BjdWN1bWJlci9jdWN1bWJlcic7XG5cbmltcG9ydCBMb2dpblBhZ2UgZnJvbSAnLi4vLi4vbG9naW4ucGFnZSc7XG5pbXBvcnQgU2VjdXJlUGFnZSBmcm9tICcuLi8uLi9zZWN1cmUucGFnZSc7XG5cbmNvbnN0IHBhZ2VzID0ge1xuICAgIGxvZ2luOiBMb2dpblBhZ2Vcbn1cblxuR2l2ZW4oL15JIGFtIG9uIHRoZSAoXFx3KykgcGFnZSQvLCBhc3luYyAocGFnZSkgPT4ge1xuICAgIGF3YWl0IHBhZ2VzW3BhZ2VdLm9wZW4oKVxufSk7XG5cbldoZW4oL15JIGxvZ2luIHdpdGggKFxcdyspIGFuZCAoLispJC8sIGFzeW5jICh1c2VybmFtZSwgcGFzc3dvcmQpID0+IHtcbiAgICBhd2FpdCBMb2dpblBhZ2UubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxufSk7XG5cblRoZW4oL15JIHNob3VsZCBzZWUgYSBmbGFzaCBtZXNzYWdlIHNheWluZyAoLiopJC8sIGFzeW5jIChtZXNzYWdlKSA9PiB7XG4gICAgYXdhaXQgZXhwZWN0KFNlY3VyZVBhZ2UuZmxhc2hBbGVydCkudG9CZUV4aXN0aW5nKCk7XG4gICAgYXdhaXQgZXhwZWN0KFNlY3VyZVBhZ2UuZmxhc2hBbGVydCkudG9IYXZlVGV4dENvbnRhaW5pbmcobWVzc2FnZSk7XG59KTtcblxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "steps.js"
      ],
      "names": [
        "Given",
        "When",
        "Then",
        "LoginPage",
        "SecurePage",
        "pages",
        "login",
        "page",
        "open",
        "username",
        "password",
        "message",
        "expect",
        "flashAlert",
        "toBeExisting",
        "toHaveTextContaining"
      ],
      "mappings": "AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,QAAkC,oBAAlC;AAEA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAEH;AADG,CAAd;AAIAH,KAAK,CAAC,0BAAD,EAA6B,MAAOO,IAAP,IAAgB;AAC9C,QAAMF,KAAK,CAACE,IAAD,CAAL,CAAYC,IAAZ,EAAN;AACH,CAFI,CAAL;AAIAP,IAAI,CAAC,+BAAD,EAAkC,OAAOQ,QAAP,EAAiBC,QAAjB,KAA8B;AAChE,QAAMP,SAAS,CAACG,KAAV,CAAgBG,QAAhB,EAA0BC,QAA1B,CAAN;AACH,CAFG,CAAJ;AAIAR,IAAI,CAAC,4CAAD,EAA+C,MAAOS,OAAP,IAAmB;AAClE,QAAMC,MAAM,CAACR,UAAU,CAACS,UAAZ,CAAN,CAA8BC,YAA9B,EAAN;AACA,QAAMF,MAAM,CAACR,UAAU,CAACS,UAAZ,CAAN,CAA8BE,oBAA9B,CAAmDJ,OAAnD,CAAN;AACH,CAHG,CAAJ",
      "sourceRoot": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\",
      "sourcesContent": [
        "import { Given, When, Then } from '@cucumber/cucumber';\n\nimport LoginPage from '../../login.page';\nimport SecurePage from '../../secure.page';\n\nconst pages = {\n    login: LoginPage\n}\n\nGiven(/^I am on the (\\w+) page$/, async (page) => {\n    await pages[page].open()\n});\n\nWhen(/^I login with (\\w+) and (.+)$/, async (username, password) => {\n    await LoginPage.login(username, password)\n});\n\nThen(/^I should see a flash message saying (.*)$/, async (message) => {\n    await expect(SecurePage.flashAlert).toBeExisting();\n    await expect(SecurePage.flashAlert).toHaveTextContaining(message);\n});\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1618643029406
  },
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Automation\\\\webdriver-io-practice\\\\features\\\\step-definitions\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Automation\\\\webdriver-io-practice\",\"filename\":\"C:\\\\Automation\\\\webdriver-io-practice\\\\features\\\\step-definitions\\\\Login.stepdef.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Automation\\\\webdriver-io-practice\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.13.15:test": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Automation\\webdriver-io-practice",
      "filename": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\Login.stepdef.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "test",
      "root": "C:\\Automation\\webdriver-io-practice",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\Login.stepdef.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\Login.stepdef.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\",
        "sourceFileName": "Login.stepdef.js"
      }
    },
    "ast": null,
    "code": "import { Given, When, Then } from '@cucumber';\nimport { expect } from 'chai'; // import LoginPage from '../../login.page';\n// import SecurePage from '../../secure.page';\n// const pages = {\n//     login: LoginPage\n// }\n\nGiven(/^I am on the login page$/, function () {\n  //  await pages[page].open()\n  browser.url(\"http://automationpractice.com/index.php\");\n});\nWhen(/^I login with (\\w+) and (.+)$/, function () {\n  browser.element(\"(.//*[@class='login'])[1]\").click();\n  browser.element(\"(.//*[@id='email'])[1]\").setValue(\"thontanaalvicky@gmail.com\");\n  browser.element(\"(.//*[@id='passwd'])[1]\").setValue(\"password\");\n  browser.element(\"(.//*[@type='submit'])[3]\").click(); //   await LoginPage.login(username, password)\n});\nThen(/^I should see a flash message saying (.*)$/, function () {\n  //  await expect(SecurePage.flashAlert).toBeExisting();\n  //  await expect(SecurePage.flashAlert).toHaveTextContaining(message);\n  expect.element(\"(.//*[@class='logout'])[1]\").toBeExisting;\n  console.log(\"My Store page is displayed\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxvZ2luLnN0ZXBkZWYuanMiXSwibmFtZXMiOlsiR2l2ZW4iLCJXaGVuIiwiVGhlbiIsImV4cGVjdCIsImJyb3dzZXIiLCJ1cmwiLCJlbGVtZW50IiwiY2xpY2siLCJzZXRWYWx1ZSIsInRvQmVFeGlzdGluZyIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEtBQVQsRUFBZ0JDLElBQWhCLEVBQXNCQyxJQUF0QixRQUFrQyxXQUFsQztBQUNDLFNBQVNDLE1BQVQsUUFBdUIsTUFBdkIsQyxDQUVEO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBRUFILEtBQUssQ0FBQywwQkFBRCxFQUE2QixZQUFZO0FBQzVDO0FBQ0VJLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlDQUFaO0FBQ0gsQ0FISSxDQUFMO0FBS0FKLElBQUksQ0FBQywrQkFBRCxFQUFrQyxZQUFhO0FBQy9DRyxFQUFBQSxPQUFPLENBQUNFLE9BQVIsQ0FBZ0IsMkJBQWhCLEVBQTZDQyxLQUE3QztBQUNBSCxFQUFBQSxPQUFPLENBQUNFLE9BQVIsQ0FBZ0Isd0JBQWhCLEVBQTBDRSxRQUExQyxDQUFtRCwyQkFBbkQ7QUFDQUosRUFBQUEsT0FBTyxDQUFDRSxPQUFSLENBQWdCLHlCQUFoQixFQUEyQ0UsUUFBM0MsQ0FBb0QsVUFBcEQ7QUFDQUosRUFBQUEsT0FBTyxDQUFDRSxPQUFSLENBQWdCLDJCQUFoQixFQUE2Q0MsS0FBN0MsR0FKK0MsQ0FLbEQ7QUFFQSxDQVBHLENBQUo7QUFTQUwsSUFBSSxDQUFDLDRDQUFELEVBQStDLFlBQVc7QUFDNUQ7QUFDQTtBQUVFQyxFQUFBQSxNQUFNLENBQUNHLE9BQVAsQ0FBZSw0QkFBZixFQUE2Q0csWUFBN0M7QUFDQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksNEJBQVo7QUFDSCxDQU5HLENBQUoiLCJzb3VyY2VSb290IjoiQzpcXEF1dG9tYXRpb25cXHdlYmRyaXZlci1pby1wcmFjdGljZVxcZmVhdHVyZXNcXHN0ZXAtZGVmaW5pdGlvbnNcXCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdpdmVuLCBXaGVuLCBUaGVuIH0gZnJvbSAnQGN1Y3VtYmVyJztcbiBpbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcblxuLy8gaW1wb3J0IExvZ2luUGFnZSBmcm9tICcuLi8uLi9sb2dpbi5wYWdlJztcbi8vIGltcG9ydCBTZWN1cmVQYWdlIGZyb20gJy4uLy4uL3NlY3VyZS5wYWdlJztcblxuLy8gY29uc3QgcGFnZXMgPSB7XG4vLyAgICAgbG9naW46IExvZ2luUGFnZVxuLy8gfVxuXG5HaXZlbigvXkkgYW0gb24gdGhlIGxvZ2luIHBhZ2UkLywgZnVuY3Rpb24gKCkge1xuICAvLyAgYXdhaXQgcGFnZXNbcGFnZV0ub3BlbigpXG4gICAgYnJvd3Nlci51cmwoXCJodHRwOi8vYXV0b21hdGlvbnByYWN0aWNlLmNvbS9pbmRleC5waHBcIik7XG59KTtcblxuV2hlbigvXkkgbG9naW4gd2l0aCAoXFx3KykgYW5kICguKykkLywgZnVuY3Rpb24gKCkgIHtcbiAgICBicm93c2VyLmVsZW1lbnQoXCIoLi8vKltAY2xhc3M9J2xvZ2luJ10pWzFdXCIpLmNsaWNrKCk7XG4gICAgYnJvd3Nlci5lbGVtZW50KFwiKC4vLypbQGlkPSdlbWFpbCddKVsxXVwiKS5zZXRWYWx1ZShcInRob250YW5hYWx2aWNreUBnbWFpbC5jb21cIik7XG4gICAgYnJvd3Nlci5lbGVtZW50KFwiKC4vLypbQGlkPSdwYXNzd2QnXSlbMV1cIikuc2V0VmFsdWUoXCJwYXNzd29yZFwiKTtcbiAgICBicm93c2VyLmVsZW1lbnQoXCIoLi8vKltAdHlwZT0nc3VibWl0J10pWzNdXCIpLmNsaWNrKCk7XG4gLy8gICBhd2FpdCBMb2dpblBhZ2UubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuXG59KTtcblxuVGhlbigvXkkgc2hvdWxkIHNlZSBhIGZsYXNoIG1lc3NhZ2Ugc2F5aW5nICguKikkLywgZnVuY3Rpb24gKCl7XG4gIC8vICBhd2FpdCBleHBlY3QoU2VjdXJlUGFnZS5mbGFzaEFsZXJ0KS50b0JlRXhpc3RpbmcoKTtcbiAgLy8gIGF3YWl0IGV4cGVjdChTZWN1cmVQYWdlLmZsYXNoQWxlcnQpLnRvSGF2ZVRleHRDb250YWluaW5nKG1lc3NhZ2UpO1xuXG4gICAgZXhwZWN0LmVsZW1lbnQoXCIoLi8vKltAY2xhc3M9J2xvZ291dCddKVsxXVwiKS50b0JlRXhpc3Rpbmc7XG4gICAgY29uc29sZS5sb2coXCJNeSBTdG9yZSBwYWdlIGlzIGRpc3BsYXllZFwiKTtcbn0pO1xuXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "Login.stepdef.js"
      ],
      "names": [
        "Given",
        "When",
        "Then",
        "expect",
        "browser",
        "url",
        "element",
        "click",
        "setValue",
        "toBeExisting",
        "console",
        "log"
      ],
      "mappings": "AAAA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,IAAtB,QAAkC,WAAlC;AACC,SAASC,MAAT,QAAuB,MAAvB,C,CAED;AACA;AAEA;AACA;AACA;;AAEAH,KAAK,CAAC,0BAAD,EAA6B,YAAY;AAC5C;AACEI,EAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACH,CAHI,CAAL;AAKAJ,IAAI,CAAC,+BAAD,EAAkC,YAAa;AAC/CG,EAAAA,OAAO,CAACE,OAAR,CAAgB,2BAAhB,EAA6CC,KAA7C;AACAH,EAAAA,OAAO,CAACE,OAAR,CAAgB,wBAAhB,EAA0CE,QAA1C,CAAmD,2BAAnD;AACAJ,EAAAA,OAAO,CAACE,OAAR,CAAgB,yBAAhB,EAA2CE,QAA3C,CAAoD,UAApD;AACAJ,EAAAA,OAAO,CAACE,OAAR,CAAgB,2BAAhB,EAA6CC,KAA7C,GAJ+C,CAKlD;AAEA,CAPG,CAAJ;AASAL,IAAI,CAAC,4CAAD,EAA+C,YAAW;AAC5D;AACA;AAEEC,EAAAA,MAAM,CAACG,OAAP,CAAe,4BAAf,EAA6CG,YAA7C;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,CANG,CAAJ",
      "sourceRoot": "C:\\Automation\\webdriver-io-practice\\features\\step-definitions\\",
      "sourcesContent": [
        "import { Given, When, Then } from '@cucumber';\n import { expect } from 'chai';\n\n// import LoginPage from '../../login.page';\n// import SecurePage from '../../secure.page';\n\n// const pages = {\n//     login: LoginPage\n// }\n\nGiven(/^I am on the login page$/, function () {\n  //  await pages[page].open()\n    browser.url(\"http://automationpractice.com/index.php\");\n});\n\nWhen(/^I login with (\\w+) and (.+)$/, function ()  {\n    browser.element(\"(.//*[@class='login'])[1]\").click();\n    browser.element(\"(.//*[@id='email'])[1]\").setValue(\"thontanaalvicky@gmail.com\");\n    browser.element(\"(.//*[@id='passwd'])[1]\").setValue(\"password\");\n    browser.element(\"(.//*[@type='submit'])[3]\").click();\n //   await LoginPage.login(username, password)\n\n});\n\nThen(/^I should see a flash message saying (.*)$/, function (){\n  //  await expect(SecurePage.flashAlert).toBeExisting();\n  //  await expect(SecurePage.flashAlert).toHaveTextContaining(message);\n\n    expect.element(\"(.//*[@class='logout'])[1]\").toBeExisting;\n    console.log(\"My Store page is displayed\");\n});\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1618651176352
  }
}